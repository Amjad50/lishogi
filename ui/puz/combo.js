'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.Combo = void 0;
const util_1 = require('./util');
class Combo {
  constructor(config) {
    this.config = config;
    this.current = 0;
    this.best = 0;
    this.inc = () => {
      this.current++;
      this.best = Math.max(this.best, this.current);
    };
    this.reset = () => {
      this.current = 0;
    };
    this.level = () =>
      this.config.combo.levels.reduce((lvl, [threshold, _], index) => (threshold <= this.current ? index : lvl), 0);
    this.percent = () => {
      const lvl = this.level();
      const levels = this.config.combo.levels;
      const lastLevel = levels[levels.length - 1];
      if (lvl >= levels.length - 1) {
        const range = lastLevel[0] - levels[levels.length - 2][0];
        return (((this.current - lastLevel[0]) / range) * 100) % 100;
      }
      const bounds = [levels[lvl][0], levels[lvl + 1][0]];
      return Math.floor(((this.current - bounds[0]) / (bounds[1] - bounds[0])) * 100);
    };
    this.bonus = () => {
      if (this.percent() == 0) {
        const level = this.level();
        if (level > 0)
          return {
            seconds: this.config.combo.levels[level][1],
            at: util_1.getNow(),
          };
      }
      return;
    };
  }
}
exports.Combo = Combo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcmMvY29tYm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsaUNBQWdDO0FBRWhDLE1BQWEsS0FBSztJQUloQixZQUE0QixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUgxQyxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osU0FBSSxHQUFHLENBQUMsQ0FBQztRQUlULFFBQUcsR0FBRyxHQUFHLEVBQUU7WUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDO1FBRUYsVUFBSyxHQUFHLEdBQUcsRUFBRTtZQUNYLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQztRQUVGLFVBQUssR0FBRyxHQUFHLEVBQUUsQ0FDWCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVoSCxZQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUN4QyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM1QyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDNUIsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxRCxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQzlEO1lBQ0QsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2xGLENBQUMsQ0FBQztRQUVGLFVBQUssR0FBRyxHQUF3QixFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDdkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMzQixJQUFJLEtBQUssR0FBRyxDQUFDO29CQUNYLE9BQU87d0JBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzNDLEVBQUUsRUFBRSxhQUFNLEVBQUU7cUJBQ2IsQ0FBQzthQUNMO1lBQ0QsT0FBTztRQUNULENBQUMsQ0FBQztJQXBDMkMsQ0FBQztDQXFDL0M7QUF6Q0Qsc0JBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnLCBUaW1lTW9kIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGdldE5vdyB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBDb21ibyB7XG4gIGN1cnJlbnQgPSAwO1xuICBiZXN0ID0gMDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocmVhZG9ubHkgY29uZmlnOiBDb25maWcpIHt9XG5cbiAgaW5jID0gKCkgPT4ge1xuICAgIHRoaXMuY3VycmVudCsrO1xuICAgIHRoaXMuYmVzdCA9IE1hdGgubWF4KHRoaXMuYmVzdCwgdGhpcy5jdXJyZW50KTtcbiAgfTtcblxuICByZXNldCA9ICgpID0+IHtcbiAgICB0aGlzLmN1cnJlbnQgPSAwO1xuICB9O1xuXG4gIGxldmVsID0gKCkgPT5cbiAgICB0aGlzLmNvbmZpZy5jb21iby5sZXZlbHMucmVkdWNlKChsdmwsIFt0aHJlc2hvbGQsIF9dLCBpbmRleCkgPT4gKHRocmVzaG9sZCA8PSB0aGlzLmN1cnJlbnQgPyBpbmRleCA6IGx2bCksIDApO1xuXG4gIHBlcmNlbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgbHZsID0gdGhpcy5sZXZlbCgpO1xuICAgIGNvbnN0IGxldmVscyA9IHRoaXMuY29uZmlnLmNvbWJvLmxldmVscztcbiAgICBjb25zdCBsYXN0TGV2ZWwgPSBsZXZlbHNbbGV2ZWxzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsdmwgPj0gbGV2ZWxzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gbGFzdExldmVsWzBdIC0gbGV2ZWxzW2xldmVscy5sZW5ndGggLSAyXVswXTtcbiAgICAgIHJldHVybiAoKCh0aGlzLmN1cnJlbnQgLSBsYXN0TGV2ZWxbMF0pIC8gcmFuZ2UpICogMTAwKSAlIDEwMDtcbiAgICB9XG4gICAgY29uc3QgYm91bmRzID0gW2xldmVsc1tsdmxdWzBdLCBsZXZlbHNbbHZsICsgMV1bMF1dO1xuICAgIHJldHVybiBNYXRoLmZsb29yKCgodGhpcy5jdXJyZW50IC0gYm91bmRzWzBdKSAvIChib3VuZHNbMV0gLSBib3VuZHNbMF0pKSAqIDEwMCk7XG4gIH07XG5cbiAgYm9udXMgPSAoKTogVGltZU1vZCB8IHVuZGVmaW5lZCA9PiB7XG4gICAgaWYgKHRoaXMucGVyY2VudCgpID09IDApIHtcbiAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5sZXZlbCgpO1xuICAgICAgaWYgKGxldmVsID4gMClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzZWNvbmRzOiB0aGlzLmNvbmZpZy5jb21iby5sZXZlbHNbbGV2ZWxdWzFdLFxuICAgICAgICAgIGF0OiBnZXROb3coKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9O1xufVxuIl19
