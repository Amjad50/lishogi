'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.sound = exports.loadSound = exports.puzzlePov = exports.uciToLastMove = exports.getNow = exports.onInsert = exports.bind = void 0;
const shogiops_1 = require('shogiops');
const fen_1 = require('shogiops/fen');
function bind(eventName, f, redraw) {
  return onInsert(el =>
    el.addEventListener(eventName, e => {
      const res = f(e);
      if (redraw) redraw();
      return res;
    })
  );
}
exports.bind = bind;
function onInsert(f) {
  return {
    insert: vnode => f(vnode.elm),
  };
}
exports.onInsert = onInsert;
const getNow = () => Math.round(performance.now());
exports.getNow = getNow;
const uciToLastMove = uci => [uci.substr(0, 2), uci.substr(2, 2)];
exports.uciToLastMove = uciToLastMove;
const puzzlePov = puzzle => shogiops_1.opposite(fen_1.parseFen(puzzle.fen).unwrap().turn);
exports.puzzlePov = puzzlePov;
const loadSound = (file, volume, delay) => {
  setTimeout(() => window.lishogi.sound.loadOggOrMp3(file, `${window.lishogi.sound.baseUrl}/${file}`), delay || 1000);
  return () => window.lishogi.sound.play(file, volume);
};
exports.loadSound = loadSound;
exports.sound = {
  move: take => window.lishogi.sound.play(take ? 'capture' : 'move'),
  good: exports.loadSound('lisp/PuzzleStormGood', 0.9, 1000),
  wrong: exports.loadSound('lisp/Error', 0.5, 1000),
  end: exports.loadSound('lisp/PuzzleStormEnd', 1, 5000),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHVDQUFvQztBQUNwQyxzQ0FBd0M7QUFFeEMsU0FBZ0IsSUFBSSxDQUFDLFNBQWlCLEVBQUUsQ0FBb0IsRUFBRSxNQUFtQjtJQUMvRSxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUNuQixFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ2pDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixJQUFJLE1BQU07WUFBRSxNQUFNLEVBQUUsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBUkQsb0JBUUM7QUFFRCxTQUFnQixRQUFRLENBQXdCLENBQXVCO0lBQ3JFLE9BQU87UUFDTCxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQVEsQ0FBQztLQUNuQyxDQUFDO0FBQ0osQ0FBQztBQUpELDRCQUlDO0FBRU0sTUFBTSxNQUFNLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUFyRCxRQUFBLE1BQU0sVUFBK0M7QUFFM0QsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQWMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFRLENBQUMsQ0FBQztBQUFoRyxRQUFBLGFBQWEsaUJBQW1GO0FBRXRHLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxtQkFBUSxDQUFDLGNBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFBN0UsUUFBQSxTQUFTLGFBQW9FO0FBRW5GLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLE1BQWUsRUFBRSxLQUFjLEVBQUUsRUFBRTtJQUN6RSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQztJQUNwSCxPQUFPLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0FBSFcsUUFBQSxTQUFTLGFBR3BCO0FBRVcsUUFBQSxLQUFLLEdBQUc7SUFDbkIsSUFBSSxFQUFFLENBQUMsSUFBYSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUM3RSxJQUFJLEVBQUUsaUJBQVMsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDO0lBQ2xELEtBQUssRUFBRSxpQkFBUyxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDO0lBQ3pDLEdBQUcsRUFBRSxpQkFBUyxDQUFDLHFCQUFxQixFQUFFLENBQUMsRUFBRSxJQUFJLENBQUM7Q0FDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhvb2tzIH0gZnJvbSAnc25hYmJkb20vaG9va3MnO1xuaW1wb3J0IHsgUHV6emxlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IG9wcG9zaXRlIH0gZnJvbSAnc2hvZ2lvcHMnO1xuaW1wb3J0IHsgcGFyc2VGZW4gfSBmcm9tICdzaG9naW9wcy9mZW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gYmluZChldmVudE5hbWU6IHN0cmluZywgZjogKGU6IEV2ZW50KSA9PiBhbnksIHJlZHJhdz86ICgpID0+IHZvaWQpOiBIb29rcyB7XG4gIHJldHVybiBvbkluc2VydChlbCA9PlxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBlID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGYoZSk7XG4gICAgICBpZiAocmVkcmF3KSByZWRyYXcoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSW5zZXJ0PEEgZXh0ZW5kcyBIVE1MRWxlbWVudD4oZjogKGVsZW1lbnQ6IEEpID0+IHZvaWQpOiBIb29rcyB7XG4gIHJldHVybiB7XG4gICAgaW5zZXJ0OiB2bm9kZSA9PiBmKHZub2RlLmVsbSBhcyBBKSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldE5vdyA9ICgpOiBudW1iZXIgPT4gTWF0aC5yb3VuZChwZXJmb3JtYW5jZS5ub3coKSk7XG5cbmV4cG9ydCBjb25zdCB1Y2lUb0xhc3RNb3ZlID0gKHVjaTogc3RyaW5nKTogW0tleSwgS2V5XSA9PiBbdWNpLnN1YnN0cigwLCAyKSBhcyBLZXksIHVjaS5zdWJzdHIoMiwgMikgYXMgS2V5XTtcblxuZXhwb3J0IGNvbnN0IHB1enpsZVBvdiA9IChwdXp6bGU6IFB1enpsZSkgPT4gb3Bwb3NpdGUocGFyc2VGZW4ocHV6emxlLmZlbikudW53cmFwKCkudHVybik7XG5cbmV4cG9ydCBjb25zdCBsb2FkU291bmQgPSAoZmlsZTogc3RyaW5nLCB2b2x1bWU/OiBudW1iZXIsIGRlbGF5PzogbnVtYmVyKSA9PiB7XG4gIHNldFRpbWVvdXQoKCkgPT4gd2luZG93Lmxpc2hvZ2kuc291bmQubG9hZE9nZ09yTXAzKGZpbGUsIGAke3dpbmRvdy5saXNob2dpLnNvdW5kLmJhc2VVcmx9LyR7ZmlsZX1gKSwgZGVsYXkgfHwgMTAwMCk7XG4gIHJldHVybiAoKSA9PiB3aW5kb3cubGlzaG9naS5zb3VuZC5wbGF5KGZpbGUsIHZvbHVtZSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc291bmQgPSB7XG4gIG1vdmU6ICh0YWtlOiBib29sZWFuKSA9PiB3aW5kb3cubGlzaG9naS5zb3VuZC5wbGF5KHRha2UgPyAnY2FwdHVyZScgOiAnbW92ZScpLFxuICBnb29kOiBsb2FkU291bmQoJ2xpc3AvUHV6emxlU3Rvcm1Hb29kJywgMC45LCAxMDAwKSxcbiAgd3Jvbmc6IGxvYWRTb3VuZCgnbGlzcC9FcnJvcicsIDAuNSwgMTAwMCksXG4gIGVuZDogbG9hZFNvdW5kKCdsaXNwL1B1enpsZVN0b3JtRW5kJywgMSwgNTAwMCksXG59O1xuIl19
